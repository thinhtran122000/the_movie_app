def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

project.ext.envConfigFiles = [
        development       : '.env.development',
        production        : '.env.production',
        staging           : '.env.staging'
] // setting environment
apply from: project(':flutter_config').projectDir.getPath() + '/dotenv.gradle' // setting environment

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }// setting flutter lints

    flavorDimensions 'environment' // setting environment
    productFlavors {
        development {
            dimension 'environment'
        }
        production {
            dimension 'environment'
        }
        staging {
            dimension 'environment'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId project.env.get('APP_ID') // setting environment
        versionCode project.env.get('VER_CODE').toInteger() // setting environment
        versionName project.env.get('VER_NAME') //setting environment
        minSdkVersion 19 // force minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true // setting multiDex enabled
        resValue 'string', 'build_config_package', 'com.flutter.movie_app' // setting environment
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
